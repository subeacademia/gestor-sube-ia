import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Auth, signInWithEmailAndPassword, signOut, onAuthStateChanged, User } from '@angular/fire/auth';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private currentUserSubject = new BehaviorSubject<User | null>(null);
  public currentUser$ = this.currentUserSubject.asObservable();
  public isLoading$ = new BehaviorSubject<boolean>(true);

  constructor(private auth: Auth, private router: Router) {
    console.log('üîß AuthService: Inicializando servicio de autenticaci√≥n...');
    
    onAuthStateChanged(this.auth, (user) => {
      console.log('üë§ AuthService: Estado de autenticaci√≥n cambiado:', user ? 'Usuario autenticado' : 'Usuario no autenticado');
      this.currentUserSubject.next(user);
      this.isLoading$.next(false);
    });
  }

  async login(email: string, password: string): Promise<User> {
    console.log('üîê AuthService: Intentando login con email:', email);
    try {
      const userCredential = await signInWithEmailAndPassword(this.auth, email, password);
      console.log('‚úÖ AuthService: Login exitoso para usuario:', userCredential.user.email);
      return userCredential.user;
    } catch (error) {
      console.error('‚ùå AuthService: Error en login:', error);
      throw error;
    }
  }

  async logout() {
    console.log('üö™ AuthService: Cerrando sesi√≥n...');
    try {
      await signOut(this.auth);
      console.log('‚úÖ AuthService: Sesi√≥n cerrada exitosamente');
      this.router.navigate(['/login']);
    } catch (error) {
      console.error('‚ùå AuthService: Error al cerrar sesi√≥n:', error);
      throw error;
    }
  }

  // M√©todo para obtener el usuario actual de forma s√≠ncrona
  getCurrentUser(): User | null {
    return this.currentUserSubject.getValue();
  }

  // M√©todo para verificar si el usuario est√° autenticado
  isAuthenticated(): boolean {
    return this.getCurrentUser() !== null;
  }
} 