// Variables globales
let contratoActual = null;
let linkFirmaGenerado = null;

// Elementos del DOM
const loadingEnviar = document.getElementById('loading-enviar');
const errorEnviar = document.getElementById('error-enviar');
const contenidoEnviar = document.getElementById('contenido-enviar');
const resumenContrato = document.getElementById('resumen-contrato');
const emailCliente = document.getElementById('email-cliente');
const asuntoEmail = document.getElementById('asunto-email');
const mensajeEmail = document.getElementById('mensaje-email');
const linkGenerado = document.getElementById('link-generado');
const linkFirma = document.getElementById('link-firma');
const btnEnviarEmail = document.getElementById('btn-enviar-email');

// Inicializaci√≥n
document.addEventListener('DOMContentLoaded', () => {
  console.log('üöÄ Inicializando sistema de env√≠o de firma con EmailJS...');
  
  // Inicializar EmailJS
  inicializarEmailJS();
  
  // Esperar a que Firebase est√© disponible
  if (window.db) {
    inicializarEnviarFirma();
  } else {
    console.log('‚ö†Ô∏è Firebase a√∫n no est√° cargado, esperando...');
    const checkFirebase = setInterval(() => {
      if (window.db) {
        clearInterval(checkFirebase);
        inicializarEnviarFirma();
      }
    }, 100);
  }
});

// ===== INICIALIZAR EMAILJS =====
function inicializarEmailJS() {
  try {
    console.log('üîß Iniciando inicializaci√≥n de EmailJS...');
    
    // Verificar si EmailJS est√° disponible
    if (typeof emailjs === 'undefined') {
      console.warn('‚ö†Ô∏è EmailJS no est√° cargado, cargando din√°micamente...');
      cargarEmailJS();
      return;
    }
    
    console.log('üìß EmailJS detectado, verificando versi√≥n...');
    console.log('üìß EmailJS version:', emailjs.version || 'No disponible');
    
    // Inicializar EmailJS con las credenciales proporcionadas
    console.log('üîë Inicializando EmailJS con clave p√∫blica: jlnRLQBCJ1JiBM2bJ');
    emailjs.init('jlnRLQBCJ1JiBM2bJ');
    console.log('‚úÖ EmailJS inicializado correctamente');
    
    // Verificar que la inicializaci√≥n fue exitosa
    if (emailjs && typeof emailjs.send === 'function') {
      console.log('‚úÖ EmailJS est√° inicializado y listo para enviar');
      console.log('‚úÖ Funci√≥n emailjs.send disponible');
    } else {
      console.warn('‚ö†Ô∏è EmailJS no se inicializ√≥ correctamente');
      console.warn('‚ö†Ô∏è emailjs.send no est√° disponible');
    }
    
    // Verificar que tenemos acceso a los servicios
    console.log('üîç Verificando acceso a servicios de EmailJS...');
    
    // Probar la conexi√≥n con EmailJS
    testEmailJSConnection();
    
  } catch (error) {
    console.error('‚ùå Error al inicializar EmailJS:', error);
    console.error('‚ùå Detalles del error:', error.message);
  }
}

// ===== FUNCI√ìN PARA PROBAR CONEXI√ìN CON EMAILJS =====
async function testEmailJSConnection() {
  try {
    console.log('üß™ Probando conexi√≥n con EmailJS...');
    
    // Crear par√°metros de prueba
    const testParams = {
      to_email: 'test@example.com',
      to_name: 'Test User',
      subject: 'Test Email',
      message: 'This is a test email'
    };
    
    console.log('üß™ Enviando email de prueba...');
    
    // Intentar enviar un email de prueba
    const response = await emailjs.send(
      'service_d0m6iqn',
      'template_im18rqj',
      testParams
    );
    
    console.log('‚úÖ Conexi√≥n con EmailJS exitosa:', response);
    
  } catch (error) {
    console.error('‚ùå Error en conexi√≥n con EmailJS:', error);
    console.error('‚ùå Status:', error.status);
    console.error('‚ùå Text:', error.text);
    
    if (error.status === 404) {
      console.error('‚ùå PROBLEMA: Cuenta de EmailJS no encontrada');
      console.error('‚ùå SOLUCI√ìN: Verifica las credenciales en el dashboard de EmailJS');
      mostrarNotificacion('Error: Cuenta de EmailJS no encontrada. Verifica las credenciales en el dashboard.', 'error');
    }
  }
}

// ===== CARGAR EMAILJS DIN√ÅMICAMENTE =====
function cargarEmailJS() {
  const script = document.createElement('script');
  script.src = 'https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js';
  script.onload = function() {
    console.log('‚úÖ EmailJS cargado din√°micamente');
    setTimeout(() => {
      inicializarEmailJS();
    }, 100);
  };
  script.onerror = function() {
    console.error('‚ùå Error al cargar EmailJS');
    mostrarNotificacion('Error al cargar EmailJS. El env√≠o de emails no estar√° disponible.', 'error');
  };
  document.head.appendChild(script);
}

// ===== SISTEMA DE NOTIFICACIONES =====
function mostrarNotificacion(mensaje, tipo = 'success') {
  console.log(`üîî Notificaci√≥n [${tipo}]:`, mensaje);
  
  // Remover notificaciones existentes para evitar superposiciones
  const notificacionesExistentes = document.querySelectorAll('.notificacion');
  notificacionesExistentes.forEach(notif => {
    notif.classList.remove('notificacion-mostrar');
    setTimeout(() => {
      if (notif.parentElement) {
        notif.remove();
      }
    }, 300);
  });
  
  // Crear elemento de notificaci√≥n
  const notificacion = document.createElement('div');
  notificacion.className = `notificacion notificacion-${tipo}`;
  notificacion.innerHTML = `
    <div class="notificacion-contenido">
      <span class="notificacion-icono">${tipo === 'success' ? '‚úÖ' : '‚ùå'}</span>
      <span class="notificacion-mensaje">${mensaje}</span>
      <button class="notificacion-cerrar" onclick="this.parentElement.parentElement.remove()">√ó</button>
    </div>
  `;
  
  // Agregar al DOM
  document.body.appendChild(notificacion);
  
  // Animaci√≥n de entrada
  setTimeout(() => {
    notificacion.classList.add('notificacion-mostrar');
  }, 100);
  
  // Auto-remover despu√©s de 5 segundos
  setTimeout(() => {
    if (notificacion.parentElement) {
      notificacion.classList.remove('notificacion-mostrar');
      setTimeout(() => {
        if (notificacion.parentElement) {
          notificacion.remove();
        }
      }, 300);
    }
  }, 5000);
}

// ===== INICIALIZACI√ìN DEL SISTEMA =====
async function inicializarEnviarFirma() {
  try {
    // Obtener ID del contrato desde la URL
    const urlParams = new URLSearchParams(window.location.search);
    const contratoId = urlParams.get('id');
    
    if (!contratoId) {
      mostrarError('No se proporcion√≥ ID de contrato');
      return;
    }
    
    console.log('üìã Cargando contrato para env√≠o:', contratoId);
    
    // Cargar datos del contrato
    await cargarContrato(contratoId);
    
    // Llenar formulario con datos del cliente
    llenarFormularioCliente();
    
    // Mostrar contenido
    mostrarContenido();
    
  } catch (error) {
    console.error('‚ùå Error al inicializar env√≠o de firma:', error);
    mostrarError('Error al inicializar el sistema de env√≠o: ' + error.message);
  }
}

// ===== CARGAR CONTRATO =====
async function cargarContrato(contratoId) {
  try {
    // Importar Firebase din√°micamente
    const { doc, getDoc } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js');
    
    const contratoRef = doc(window.db, 'contratos', contratoId);
    const contratoSnap = await getDoc(contratoRef);
    
    if (!contratoSnap.exists()) {
      throw new Error('Contrato no encontrado');
    }
    
    contratoActual = {
      id: contratoSnap.id,
      ...contratoSnap.data()
    };
    
    console.log('‚úÖ Contrato cargado para env√≠o:', contratoActual);
    
    // Renderizar resumen del contrato
    renderizarResumenContrato();
    
  } catch (error) {
    console.error('‚ùå Error al cargar contrato:', error);
    throw error;
  }
}

// ===== RENDERIZAR RESUMEN DEL CONTRATO =====
function renderizarResumenContrato() {
  if (!contratoActual) return;
  
  const resumenHTML = `
    <div class="detalle-seccion">
      <h4>üìã Informaci√≥n General</h4>
      <p><strong>T√≠tulo:</strong> ${contratoActual.tituloContrato || 'Sin t√≠tulo'}</p>
      <p><strong>C√≥digo:</strong> ${contratoActual.codigoCotizacion || 'Sin c√≥digo'}</p>
      <p><strong>Estado:</strong> <span class="estado-badge estado-${contratoActual.estadoContrato ? contratoActual.estadoContrato.toLowerCase().replace(/\s+/g, '-') : 'pendiente-de-firma'}">${contratoActual.estadoContrato || 'Pendiente de Firma'}</span></p>
      <p><strong>Fecha de Creaci√≥n:</strong> ${formatearFecha(contratoActual.fechaCreacionContrato)}</p>
    </div>
    
    <div class="detalle-seccion">
      <h4>üë§ Informaci√≥n del Cliente</h4>
      <p><strong>Nombre:</strong> ${contratoActual.cliente?.nombre || 'No especificado'}</p>
      <p><strong>Email:</strong> ${contratoActual.cliente?.email || 'No especificado'}</p>
      <p><strong>RUT:</strong> ${contratoActual.cliente?.rut || 'No especificado'}</p>
      <p><strong>Empresa:</strong> ${contratoActual.cliente?.empresa || 'No especificada'}</p>
    </div>
    
    <div class="detalle-seccion">
      <h4>üí∞ Informaci√≥n Financiera</h4>
      <p><strong>Valor Total:</strong> $${(contratoActual.totalConDescuento || contratoActual.total || 0).toLocaleString()}</p>
      ${contratoActual.descuento > 0 ? `<p><strong>Descuento:</strong> ${contratoActual.descuento}%</p>` : ''}
      <p><strong>Atendido por:</strong> ${contratoActual.atendido || 'No especificado'}</p>
    </div>
    
    ${contratoActual.partesInvolucradas ? `
    <div class="detalle-seccion">
      <h4>ü§ù Partes Involucradas</h4>
      <p>${contratoActual.partesInvolucradas}</p>
    </div>
    ` : ''}
    
    ${contratoActual.objetoContrato ? `
    <div class="detalle-seccion">
      <h4>üìÑ Objeto del Contrato</h4>
      <p>${contratoActual.objetoContrato.replace(/\n/g, '<br>')}</p>
    </div>
    ` : ''}
    
    ${contratoActual.clausulas ? `
    <div class="detalle-seccion">
      <h4>üìú Cl√°usulas y T√©rminos</h4>
      <p>${contratoActual.clausulas.replace(/\n/g, '<br>')}</p>
    </div>
    ` : ''}
    
    ${contratoActual.fechaInicio || contratoActual.fechaFin ? `
    <div class="detalle-seccion">
      <h4>üìÖ Fechas del Contrato</h4>
      ${contratoActual.fechaInicio ? `<p><strong>Fecha de Inicio:</strong> ${formatearFecha(contratoActual.fechaInicio)}</p>` : ''}
      ${contratoActual.fechaFin ? `<p><strong>Fecha de Fin:</strong> ${formatearFecha(contratoActual.fechaFin)}</p>` : ''}
    </div>
    ` : ''}
  `;
  
  resumenContrato.innerHTML = resumenHTML;
}

// ===== LLENAR FORMULARIO CON DATOS DEL CLIENTE =====
function llenarFormularioCliente() {
  if (!contratoActual || !contratoActual.cliente) return;
  
  // Llenar email del cliente
  if (emailCliente && contratoActual.cliente.email) {
    emailCliente.value = contratoActual.cliente.email;
  }
  
  // Llenar asunto del email
  if (asuntoEmail) {
    asuntoEmail.value = `Firma de Contrato - ${contratoActual.codigoCotizacion || 'SUBE IA'}`;
  }
  
  // Llenar mensaje personalizado
  if (mensajeEmail) {
    const mensajePersonalizado = `Estimado ${contratoActual.cliente.nombre || 'cliente'},

Adjunto encontrar√° el link para firmar su contrato de manera digital y segura.

Por favor, haga clic en el enlace de abajo para acceder al sistema de firma:

[LINK DE FIRMA]

Una vez completada la firma, recibir√° una copia del contrato firmado en su email.

Saludos cordiales,
Equipo SUBE IA`;
    
    mensajeEmail.value = mensajePersonalizado;
  }
}

// ===== GENERAR LINK DE FIRMA =====
async function generarLinkFirma() {
  if (!contratoActual) {
    mostrarNotificacion('Error: No hay contrato cargado', 'error');
    return;
  }
  
  try {
    console.log('üîó Generando link de firma...');
    
    // Generar token √∫nico para el link
    const tokenFirma = generarTokenUnico();
    
    // Guardar token en Firestore
    await guardarTokenFirma(tokenFirma);
    
    // Generar URL del link
    const baseUrl = window.location.origin;
    const linkCompleto = `${baseUrl}/firmar-contrato-cliente?token=${tokenFirma}&id=${contratoActual.id}`;
    
    linkFirmaGenerado = linkCompleto;
    
    // Mostrar link generado
    if (linkFirma) {
      linkFirma.value = linkCompleto;
    }
    
    // Mostrar secci√≥n del link
    if (linkGenerado) {
      linkGenerado.style.display = 'block';
    }
    
    // Habilitar botones de env√≠o
    if (btnEnviarEmail) {
      btnEnviarEmail.disabled = false;
    }
    
    // Habilitar bot√≥n de env√≠o manual
    const btnEnviarManual = document.getElementById('btn-enviar-manual');
    if (btnEnviarManual) {
      btnEnviarManual.disabled = false;
    }
    
    console.log('‚úÖ Link de firma generado:', linkCompleto);
    mostrarNotificacion('Link de firma generado exitosamente', 'success');
    
  } catch (error) {
    console.error('‚ùå Error al generar link de firma:', error);
    mostrarNotificacion('Error al generar el link de firma: ' + error.message, 'error');
  }
}

// ===== GUARDAR TOKEN DE FIRMA =====
async function guardarTokenFirma(token) {
  try {
    // Importar Firebase din√°micamente
    const { doc, updateDoc } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js');
    
    // Actualizar el contrato en Firestore
    const contratoRef = doc(window.db, 'contratos', contratoActual.id);
    await updateDoc(contratoRef, {
      tokenFirma: token,
      fechaGeneracionToken: new Date(),
      linkFirmaActivo: true
    });
    
    console.log('‚úÖ Token de firma guardado en Firestore');
    
  } catch (error) {
    console.error('‚ùå Error al guardar token de firma:', error);
    throw error;
  }
}

// ===== ENVIAR EMAIL CON EMAILJS =====
async function enviarEmailFirma() {
  if (!contratoActual) {
    mostrarNotificacion('Error: No hay contrato cargado', 'error');
    return;
  }
  
  if (!linkFirmaGenerado) {
    mostrarNotificacion('Error: Debe generar el link de firma primero', 'error');
    return;
  }
  
  const email = emailCliente.value.trim();
  const asunto = asuntoEmail.value.trim();
  const mensaje = mensajeEmail.value.trim();
  
  if (!email) {
    mostrarNotificacion('Error: Debe ingresar el email del cliente', 'error');
    return;
  }
  
  if (!asunto) {
    mostrarNotificacion('Error: Debe ingresar el asunto del email', 'error');
    return;
  }
  
  if (!mensaje) {
    mostrarNotificacion('Error: Debe ingresar el mensaje del email', 'error');
    return;
  }
  
  try {
    console.log('üìß Enviando email con EmailJS...');
    console.log('üìß Estado de EmailJS:', typeof emailjs);
    
    // Verificar que EmailJS est√© disponible
    if (typeof emailjs === 'undefined') {
      throw new Error('EmailJS no est√° disponible');
    }
    
    console.log('üìß EmailJS est√° disponible, verificando inicializaci√≥n...');
    console.log('üìß emailjs.send disponible:', typeof emailjs.send);
    
    // Verificar que EmailJS est√© inicializado
    if (!emailjs || typeof emailjs.send !== 'function') {
      console.log('üîÑ Reinicializando EmailJS...');
      emailjs.init('jlnRLQBCJ1JiBM2bJ');
      await new Promise(resolve => setTimeout(resolve, 1000));
      console.log('üîÑ EmailJS reinicializado');
    }
    
    // Preparar par√°metros del template
    const templateParams = {
      to_email: email,
      to_name: contratoActual.cliente?.nombre || 'Cliente',
      subject: asunto,
      message: mensaje.replace('[LINK DE FIRMA]', linkFirmaGenerado),
      contract_code: contratoActual.codigoCotizacion || 'Sin c√≥digo',
      contract_title: contratoActual.tituloContrato || 'Sin t√≠tulo',
      company_name: contratoActual.cliente?.empresa || 'Sin empresa',
      signature_link: linkFirmaGenerado
    };
    
    console.log('üìã Par√°metros del email:', templateParams);
    console.log('üîë Service ID: service_d0m6iqn');
    console.log('üîë Template ID: template_im18rqj');
    
    // Enviar email usando EmailJS con m√©todo m√°s robusto
    console.log('üìß Intentando env√≠o con EmailJS...');
    
    // M√©todo 1: Usar emailjs.sendForm (m√°s confiable)
    const formData = new FormData();
    formData.append('service_id', 'service_d0m6iqn');
    formData.append('template_id', 'template_im18rqj');
    formData.append('user_id', 'jlnRLQBCJ1JiBM2bJ');
    
    // Agregar par√°metros del template
    Object.keys(templateParams).forEach(key => {
      formData.append(key, templateParams[key]);
    });
    
    console.log('üìß Usando m√©todo emailjs.sendForm...');
    const response = await emailjs.sendForm(
      'service_d0m6iqn',
      'template_im18rqj',
      formData
    );
    
    console.log('‚úÖ Email enviado exitosamente:', response);
    
    // Guardar registro del env√≠o
    await guardarEnvioEmail(email, asunto, mensaje);
    
    // Mostrar notificaci√≥n de √©xito
    mostrarNotificacion('Email enviado exitosamente al cliente', 'success');
    
    // Deshabilitar bot√≥n para evitar env√≠os m√∫ltiples
    if (btnEnviarEmail) {
      btnEnviarEmail.disabled = true;
      btnEnviarEmail.textContent = 'Email Enviado ‚úÖ';
    }
    
  } catch (error) {
    console.error('‚ùå Error al enviar email con EmailJS:', error);
    
    // Mostrar error m√°s espec√≠fico
    let errorMessage = 'Error al enviar email';
    if (error.status === 404) {
      errorMessage = 'Error: Cuenta de EmailJS no encontrada. Verifica las credenciales.';
    } else if (error.status === 400) {
      errorMessage = 'Error: Par√°metros incorrectos en el template de EmailJS.';
    } else if (error.text) {
      errorMessage = `Error: ${error.text}`;
    } else if (error.message) {
      errorMessage = `Error: ${error.message}`;
    }
    
    mostrarNotificacion(errorMessage, 'error');
    
    // Ofrecer m√©todo de fallback
    console.log('üîÑ Ofreciendo m√©todo de fallback...');
    const usarFallback = confirm(`
      EmailJS no est√° funcionando. 
      
      ¬øDeseas usar el m√©todo de env√≠o manual?
      
      Esto abrir√° tu cliente de email con el mensaje pre-rellenado.
    `);
    
    if (usarFallback) {
      await enviarEmailFallback(email, asunto, mensaje);
    }
  }
}

// ===== FUNCI√ìN DE FALLBACK PARA ENV√çO DE EMAILS =====
async function enviarEmailFallback(email, asunto, mensaje) {
  try {
    console.log('üìß Usando m√©todo de fallback para env√≠o de email...');
    
    // Crear un enlace mailto como fallback
    const mailtoLink = `mailto:${email}?subject=${encodeURIComponent(asunto)}&body=${encodeURIComponent(mensaje)}`;
    
    // Mostrar instrucciones al usuario
    const instrucciones = `
      EmailJS no est√° funcionando. Para enviar el email manualmente:
      
      1. Se abrir√° tu cliente de email predeterminado
      2. El email estar√° pre-rellenado con:
         - Para: ${email}
         - Asunto: ${asunto}
         - Mensaje: ${mensaje}
      
      3. Solo necesitas hacer clic en "Enviar"
      
      ¬øDeseas continuar?
    `;
    
    if (confirm(instrucciones)) {
      // Abrir el cliente de email
      window.open(mailtoLink, '_blank');
      
      // Guardar registro del env√≠o manual
      await guardarEnvioEmail(email, asunto, mensaje + ' (Enviado manualmente)');
      
      mostrarNotificacion('Cliente de email abierto. Por favor, env√≠a el email manualmente.', 'success');
      
      // Deshabilitar bot√≥n
      if (btnEnviarEmail) {
        btnEnviarEmail.disabled = true;
        btnEnviarEmail.textContent = 'Email Manual ‚úÖ';
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error en m√©todo de fallback:', error);
    mostrarNotificacion('Error en m√©todo de fallback: ' + error.message, 'error');
  }
}

// ===== GUARDAR REGISTRO DE ENV√çO =====
async function guardarEnvioEmail(email, asunto, mensaje) {
  try {
    // Importar Firebase din√°micamente
    const { doc, updateDoc } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js');
    
    // Actualizar el contrato en Firestore
    const contratoRef = doc(window.db, 'contratos', contratoActual.id);
    await updateDoc(contratoRef, {
      emailEnviado: true,
      fechaEnvioEmail: new Date(),
      emailDestinatario: email,
      asuntoEmail: asunto,
      mensajeEmail: mensaje,
      linkEnviado: linkFirmaGenerado
    });
    
    console.log('‚úÖ Registro de env√≠o guardado en Firestore');
    
  } catch (error) {
    console.error('‚ùå Error al guardar registro de env√≠o:', error);
    // No lanzar error aqu√≠ para no interrumpir el flujo
  }
}

// ===== COPIAR LINK =====
function copiarLink() {
  if (!linkFirmaGenerado) {
    mostrarNotificacion('Error: No hay link generado para copiar', 'error');
    return;
  }
  
  try {
    // Usar la API moderna de clipboard
    if (navigator.clipboard && window.isSecureContext) {
      navigator.clipboard.writeText(linkFirmaGenerado).then(() => {
        mostrarNotificacion('Link copiado al portapapeles', 'success');
      });
    } else {
      // Fallback para navegadores m√°s antiguos
      const textArea = document.createElement('textarea');
      textArea.value = linkFirmaGenerado;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      try {
        document.execCommand('copy');
        mostrarNotificacion('Link copiado al portapapeles', 'success');
      } catch (err) {
        console.error('Error al copiar:', err);
        mostrarNotificacion('Error al copiar el link', 'error');
      }
      
      document.body.removeChild(textArea);
    }
  } catch (error) {
    console.error('‚ùå Error al copiar link:', error);
    mostrarNotificacion('Error al copiar el link: ' + error.message, 'error');
  }
}

// ===== VOLVER A CONTRATOS =====
function volverContratos() {
          window.router.navigate('/contratos');
}

// ===== GENERAR TOKEN √öNICO =====
function generarTokenUnico() {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(2, 15);
  const token = `${timestamp}-${random}`;
  return token;
}

// ===== FUNCIONES DE UTILIDAD =====
function formatearFecha(fecha) {
  if (!fecha) return 'Fecha no disponible';
  
  let fechaObj;
  
  // Si es un timestamp de Firestore
  if (fecha && typeof fecha === 'object' && fecha.toDate) {
    fechaObj = fecha.toDate();
  }
  // Si es una fecha v√°lida
  else if (fecha instanceof Date) {
    fechaObj = fecha;
  }
  // Si es un string o n√∫mero, intentar crear Date
  else {
    fechaObj = new Date(fecha);
  }
  
  // Verificar que la fecha sea v√°lida
  if (isNaN(fechaObj.getTime())) {
    return 'Fecha no disponible';
  }
  
  return fechaObj.toLocaleDateString('es-CL', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function mostrarError(mensaje) {
  loadingEnviar.style.display = 'none';
  errorEnviar.style.display = 'block';
  errorEnviar.textContent = mensaje;
}

function mostrarContenido() {
  loadingEnviar.style.display = 'none';
  errorEnviar.style.display = 'none';
  contenidoEnviar.style.display = 'block';
}

// ===== HACER FUNCIONES DISPONIBLES GLOBALMENTE =====
window.generarLinkFirma = generarLinkFirma;
window.enviarEmailFirma = enviarEmailFirma;
window.copiarLink = copiarLink;
window.volverContratos = volverContratos;
window.mostrarNotificacion = mostrarNotificacion;
window.enviarEmailManual = enviarEmailManual; 

// ===== FUNCI√ìN PARA ENV√çO MANUAL DE EMAIL =====
async function enviarEmailManual() {
  if (!contratoActual) {
    mostrarNotificacion('Error: No hay contrato cargado', 'error');
    return;
  }
  
  if (!linkFirmaGenerado) {
    mostrarNotificacion('Error: Debe generar el link de firma primero', 'error');
    return;
  }
  
  const email = emailCliente.value.trim();
  const asunto = asuntoEmail.value.trim();
  const mensaje = mensajeEmail.value.trim();
  
  if (!email) {
    mostrarNotificacion('Error: Debe ingresar el email del cliente', 'error');
    return;
  }
  
  if (!asunto) {
    mostrarNotificacion('Error: Debe ingresar el asunto del email', 'error');
    return;
  }
  
  if (!mensaje) {
    mostrarNotificacion('Error: Debe ingresar el mensaje del email', 'error');
    return;
  }
  
  console.log('üìÆ Iniciando env√≠o manual de email...');
  await enviarEmailFallback(email, asunto, mensaje);
} 